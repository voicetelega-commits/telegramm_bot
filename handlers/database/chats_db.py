import sqlite3
import logging
from typing import List, Dict, Optional

logger = logging.getLogger(__name__)

class ChatsDatabase:
    def __init__(self, db_path: str = "telegram_bot.db"):
        self.db_path = db_path
        self.init_database()

    def get_connection(self):
        return sqlite3.connect(self.db_path)
    
    def init_database(self):
        with self.get_connection() as conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS categories(
                    id TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    emoji TEXT)
                """)
            
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS chats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    category_id TEXT NOT NULL,
                    name TEXT NOT NULL,  -- –î–û–ë–ê–í–õ–ï–ù–û –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                    username TEXT NOT NULL UNIQUE,
                    subscribers TEXT,
                    FOREIGN KEY (category_id) REFERENCES categories (id)
                )               
                """)
            
            cursor = conn.execute("PRAGMA table_info(chats)")
            columns = [column[1] for column in cursor.fetchall()]       

            if 'name' not in columns:
                conn.execute("ALTER TABLE chats ADD COLUMN name TEXT NOT NULL DEFAULT 'Channel'")
                logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ name –≤ —Ç–∞–±–ª–∏—Ü—É chats")                 
            
            self._seed_categories(conn)
            self._seed_chats(conn)
            
            conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def _seed_categories(self, conn):
        categories = [
        ('cat_crypto', 'ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ / TON', 'ü™ô'),
        ('cat_ai', 'üß† –ù–µ–π—Ä–æ—Å–µ—Ç–∏ / AI', 'üß†'),
        ('cat_marketing', 'üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ / –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', 'üìà'),
        ('cat_arbitrage', 'üí∞ –ê—Ä–±–∏—Ç—Ä–∞–∂ / –¢—Ä–∞—Ñ–∏–∫', 'üí∞'),
        ('cat_blogging', 'üé• –ë–ª–æ–≥–∏–Ω–≥ / –ö–æ–Ω—Ç–µ–Ω—Ç', 'üé•'),
        ('cat_it', 'üíº IT / –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è', 'üíº'),
        ]
        conn.executemany(
            """
            INSERT OR IGNORE INTO categories (id, name, emoji)
            VALUES (?, ?, ?)
            """, categories)

    def _seed_chats(self, conn):
        chats = [
            # –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ê 
            ('cat_crypto', 'OKX –ù–æ–≤–æ—Å—Ç–∏', '@okx_ru', '6204899 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', 'Crypto Wolf', '@Crypto_Woolf', '3343456 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', '–î–∞–π—Ç–µ TON!', '@SearcheeBot', '287654 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', 'Binance Russian', '@binance_russian', '1892345 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', 'Crypto Pro', '@cryptopro_ru', '1567890 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', '–ö—Ä–∏–ø—Ç–æ-–±—ã–∫', '@cryptobull_ru', '923456 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', 'Bitcoin News RU', '@bitcoin_news_rus', '812300 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', 'Ethereum Russia', '@ethereum_russia', '654321 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', 'DeFi –ø–æ-—Ä—É—Å—Å–∫–∏', '@defi_rus', '543210 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', 'NFT –ú–∏—Ä', '@nft_world_ru', '432100 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_crypto', 'Bybit Russian', '@BybitRussian', '99236 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'Vseznayka Chat', '@vseznayka_chat', '23683 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'Web Investors', '@web_investors', '23279 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'Cryptanci Chat', '@cryptancichat', '27660 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'Starpets GG', '@starpetsgg_chat', '9258 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'Ton Farm', '@TonFarm4at', '37006 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'Rus CryptEx', '@RusCryptEx', '15909 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'MEXC Russian', '@MEXCRussianOfficial', '25843 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'Mining Irkutsk', '@mining_irkutskk', '12487 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
            ('cat_crypto', 'Crypto Signals', '@crypto_signals_ru', '387654 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            
            # –ù–ï–ô–†–û–°–ï–¢–ò / AI 
            ('cat_ai', '–ù–µ–π—Ä–æ—Å–µ—Ç–∏ | AI', '@neuronseti', '890123 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'AI Revolution', '@ai_revolution_ru', '567890 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'ChatGPT –ø–æ-—Ä—É—Å—Å–∫–∏', '@chatgpt_rus', '456789 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'Midjourney RU', '@midjourney_ru', '345678 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç', '@ai_russia', '234567 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', '–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞', '@ai_business_ru', '198765 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'Machine Learning RU', '@ml_rus', '187654 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'AI –ü—Ä–æ–º–ø—Ç—ã', '@ai_prompts_ru', '176543 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', '–ù–µ–π—Ä–æ–≥—Ä–∞—Ñ–∏–∫–∞', '@neurographica_ru', '165432 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'AI –ù–æ–≤–æ—Å—Ç–∏', '@ai_news_ru', '154321 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'Stable Diffusion RU', '@stablediffusion_ru', '143210 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'DALL-E Russia', '@dalle_russia', '132109 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_ai', 'AI –ö–æ–¥–∏–Ω–≥', '@ai_coding_ru', '121098 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            
            # –ú–ê–†–ö–ï–¢–ò–ù–ì / –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï 
            ('cat_marketing', '–¢—Ä–∞—Ñ–∏–∫ –∏ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '@traffic_ru', '1234567 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', 'SMM Special', '@smmspecial', '789012 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞', '@context_rus', '678901 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', '–ê—Ä–±–∏—Ç—Ä–∞–∂ —Ç—Ä–∞—Ñ–∏–∫–∞', '@arbitrajnik', '567890 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', 'Email –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '@email_marketing_ru', '456789 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', 'SEO Expert', '@seo_expert_ru', '345678 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ PRO', '@copywriting_pro', '234567 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', '–õ–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥', '@personal_brand_ru', '198765 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', '–í–ö–æ–Ω—Ç–∞–∫—Ç–µ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '@vk_marketing', '187654 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', 'Telegram Marketing', '@tg_marketing_ru', '176543 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', 'Instagram Marketing', '@insta_marketing_ru', '165432 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_marketing', 'YouTube –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', '@youtube_promo', '154321 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            
            # –ê–†–ë–ò–¢–†–ê–ñ / –¢–†–ê–§–ò–ö 
            ('cat_arbitrage', '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫', '@arbitrajnik_pro', '543210 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_arbitrage', '–¢—Ä–∞—Ñ–∏–∫ –ú–æ–Ω—Å—Ç—Ä', '@traffic_monster', '432109 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_arbitrage', 'CPA Network RU', '@cpa_network_ru', '321098 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_arbitrage', '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂', '@vertical_arbitrage', '210987 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_arbitrage', '–¢—Ä–∞—Ñ–∏–∫ –∏–∑ —Å–æ—Ü—Å–µ—Ç–µ–π', '@social_traffic_ru', '198765 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_arbitrage', 'PPC –ê—Ä–±–∏—Ç—Ä–∞–∂', '@ppc_arbitrage', '187654 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            
            # –ë–õ–û–ì–ò–ù–ì / –ö–û–ù–¢–ï–ù–¢ 
            ('cat_blogging', '–ë–ª–æ–≥–∏–Ω–≥ PRO', '@blogging_pro_ru', '456789 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_blogging', 'YouTube –ú–∞—Å—Ç–µ—Ä', '@youtube_master_ru', '345678 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_blogging', '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '@content_marketing_ru', '234567 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_blogging', 'Instagram PRO', '@instagram_pro_ru', '198765 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_blogging', '–°—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥', '@storytelling_ru', '187654 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            
            # IT / –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø 
            ('cat_it', 'Python RU', '@python_ru', '543210 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_it', 'JavaScript Russia', '@javascript_russia', '432109 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_it', 'DevOps –ø–æ-—Ä—É—Å—Å–∫–∏', '@devops_rus', '321098 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_it', '–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö', '@databases_ru', '210987 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
            ('cat_it', '–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '@cybersecurity_ru', '198765 –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤'),
        ]

        conn.executemany(
            """
            INSERT OR IGNORE INTO chats (category_id, name, username, subscribers)
            VALUES (?, ?, ?, ?)
            """, chats)

    def get_all_categories(self) -> List[Dict]:
        with self.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute('''
                SELECT id, name, emoji 
                FROM categories 
                ORDER BY name
            ''')
            return [dict(row) for row in cursor.fetchall()]

    def get_channels_by_category(self, category_id: str, limit: int = 5, offset: int = 0) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        with self.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute(
                '''
                SELECT name, username, subscribers
                FROM chats 
                WHERE category_id = ?
                ORDER BY name
                LIMIT ? OFFSET ?
                ''', (category_id, limit, offset))
            return [dict(row) for row in cursor.fetchall()]

    def get_channels_count_by_category(self, category_id: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        with self.get_connection() as conn:
            cursor = conn.execute(
                '''
                SELECT COUNT(*) 
                FROM chats 
                WHERE category_id = ?
                ''', (category_id,))
            return cursor.fetchone()[0]
        
    def get_category_info(self, category_id: str) -> Optional[Dict]:
        with self.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute(
                '''
                SELECT id, name, emoji
                FROM categories
                WHERE id = ?
                ''', (category_id,))
            result = cursor.fetchone()
            return dict(result) if result else None


    #–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    def search_channels(self, keyword: str, limit: int = 20) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)"""
        with self.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            
            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_pattern = f'%{keyword.lower()}%'
            
            cursor = conn.execute(
                '''
                SELECT c.name, c.username, c.subscribers, cat.name as category_name, cat.emoji
                FROM chats c
                JOIN categories cat ON c.category_id = cat.id
                WHERE LOWER(c.name) LIKE ? OR LOWER(c.username) LIKE ?
                ORDER BY c.name
                LIMIT ?
                ''', (search_pattern, search_pattern, limit))
            
            return [dict(row) for row in cursor.fetchall()]
            

chats_db = ChatsDatabase()
