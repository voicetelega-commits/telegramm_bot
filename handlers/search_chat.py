import asyncio
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from keyboards.main_menu import get_categories_keyboard, get_search_keyboard
from database.chats_db import chats_db

router = Router()

user_pages = {}

class SearchStates(StatesGroup):
    waiting_for_keyword = State()

# –ú–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@router.callback_query(F.data == 'search_by_category') 
async def menu_categories(callback: types.CallbackQuery):
    text_menu = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:'
    await callback.message.edit_text(text_menu, reply_markup=get_categories_keyboard())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith('cat_'))
async def show_category_channels(callback: types.CallbackQuery):
    category_id = callback.data
    user_id = callback.from_user.id
    user_pages[user_id] = {category_id: 0}
    await show_category_page(callback, category_id, 0)
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_category_page(callback: types.CallbackQuery, category_id: str, page: int):
    user_id = callback.from_user.id  # noqa: F841 - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    limit = 5
    
    category_info = chats_db.get_category_info(category_id)
    channels = chats_db.get_channels_by_category(category_id, limit=limit, offset=page * limit)
    total_channels = chats_db.get_channels_count_by_category(category_id)
    
    if not category_info or not channels:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞")
        return

    text = f"<b>{category_info['name']}</b>\n\n"
    
    for i, channel in enumerate(channels, 1):
        text += f"<b>{channel['name']}</b>\n"
        text += f"{channel['username']} [{channel['subscribers']}]\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    current_page = page + 1
    total_pages = (total_channels + limit - 1) // limit
    text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}/{total_pages}\n"
    text += "#crypto"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if page > 0:
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{category_id}_{page-1}"))
    
    if (page + 1) * limit < total_channels:
        builder.add(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"page_{category_id}_{page+1}"))
    
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_search"))
    builder.adjust(2, 1)  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –∑–∞—Ç–µ–º 1
    
    await callback.message.edit_text(
        text,
        reply_markup=builder.as_markup(),
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
@router.callback_query(F.data.startswith('page_'))
async def handle_pagination(callback: types.CallbackQuery):
    # page_cat_crypto_1 -> ['page', 'cat_crypto', '1']
    parts = callback.data.split('_')
    if len(parts) >= 3:
        category_id = f"{parts[1]}_{parts[2]}"  # cat_crypto
        page = int(parts[3]) if len(parts) > 3 else 0
        
        await show_category_page(callback, category_id, page)
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@router.callback_query(F.data == 'back_to_search')
async def to_main_start(callback: types.CallbackQuery):
    text_menu = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:'
    await callback.message.edit_text(text_menu, reply_markup=get_search_keyboard())
    await callback.answer()

# –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@router.callback_query(F.data == 'search_by_keyword')
async def start_keyword_search(callback: types.CallbackQuery, state: FSMContext):
    text = "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:</b>\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
    text += "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
    text += "‚Ä¢ Username\n"
    text += "‚Ä¢ –¢–µ–º–∞—Ç–∏–∫—É\n\n"
    text += "<i>–ü—Ä–∏–º–µ—Ä: crypto, bitcoin, news</i>"

    builder = InlineKeyboardBuilder()  
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search"))  
    builder.adjust(1)

    # –£–î–ê–õ–Ø–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    await callback.message.answer(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode='HTML'
    )
    
    await state.set_state(SearchStates.waiting_for_keyword)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@router.message(SearchStates.waiting_for_keyword)
async def process_keyword_search(message: types.Message, state: FSMContext):
    keyword = message.text.strip()

    # –£–î–ê–õ–Ø–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()

    if len(keyword) < 2:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (—É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã)
        msg = await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        await asyncio.sleep(3)
        await msg.delete()
        return

    results = chats_db.search_channels(keyword)
    
    if not results:
        text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> '{keyword}'\n\n"
        text += "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
        text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        text += "‚Ä¢ –î—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
        text += "‚Ä¢ –ë–æ–ª–µ–µ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å\n"
        text += "‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"

        builder = InlineKeyboardBuilder() 
        builder.add(InlineKeyboardButton(text='üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫', callback_data='new_keyword_search'))  # –ò–∑–º–µ–Ω–∏–ª–∏ callback_data
        builder.add(InlineKeyboardButton(text='üß≠ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data='search_by_category'))
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search")) 
        builder.adjust(1)

        await message.answer(text, reply_markup=builder.as_markup(), parse_mode='HTML')

    else:
        text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:</b> '{keyword}'\n\n"

        for i, channel in enumerate(results[:10], 1):  
            text += f"<b>{channel['name']}</b>\n"
            text += f"{channel['username']} [{channel['subscribers']}]\n"
            text += f"üìÅ {channel['emoji']} {channel['category_name']}\n\n"           

        if len(results) > 10:
            text += f"<i>–ü–æ–∫–∞–∑–∞–Ω–æ 10 –∏–∑ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</i>\n\n"

        text += "üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</i>"
        
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_keyword_search"))  # –ò–∑–º–µ–Ω–∏–ª–∏ callback_data
        builder.add(InlineKeyboardButton(text="üß≠ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_by_category"))
        builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search"))
        builder.adjust(1)
        
        await message.answer(
            text,
            reply_markup=builder.as_markup(),
            parse_mode='HTML'
        )

    await state.clear()

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫" (—É–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
@router.callback_query(F.data == 'new_keyword_search')
async def new_keyword_search(callback: types.CallbackQuery, state: FSMContext):
    text = "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:</b>\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
    text += "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞\n"
    text += "‚Ä¢ Username\n"
    text += "‚Ä¢ –¢–µ–º–∞—Ç–∏–∫—É\n\n"
    text += "<i>–ü—Ä–∏–º–µ—Ä: crypto, bitcoin, news</i>"

    builder = InlineKeyboardBuilder()  
    builder.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search"))  
    builder.adjust(1)

    # –£–î–ê–õ–Ø–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback.message.delete()
    await callback.message.answer(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode='HTML'
    )
    
    await state.set_state(SearchStates.waiting_for_keyword)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞
@router.callback_query(F.data == "back_to_search", SearchStates.waiting_for_keyword)
async def cancel_search(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    text_menu = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:'
    await callback.message.edit_text(text_menu, reply_markup=get_search_keyboard())
    await callback.answer()